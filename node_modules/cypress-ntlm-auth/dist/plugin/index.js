"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// reflect-metadata is required since PortsFileService and DebugLogger has decorator injectable
require("reflect-metadata");
const debug_logger_1 = require("../util/debug.logger");
const ports_file_service_1 = require("../util/ports.file.service");
let portsFileService = new ports_file_service_1.PortsFileService();
let debug = new debug_logger_1.DebugLogger();
function validateEnvironment(ports) {
    if (!process.env.HTTP_PROXY) {
        debug.log('Error: HTTP_PROXY environment variable not set');
        throw new Error('HTTP_PROXY environment variable not set. Make sure cypress is started using the cypress-ntlm launcher.');
    }
    if (process.env.HTTP_PROXY !== ports.ntlmProxyUrl) {
        debug.log('Error: HTTP_PROXY environment variable (' + process.env.HTTP_PROXY + ') ' +
            'is not set to current NTLM proxy url (' + ports.ntlmProxyUrl + ').');
        throw new Error('HTTP_PROXY environment variable is not set to ' +
            'current NTLM proxy url (' + ports.ntlmProxyUrl + '). ' +
            'Make sure cypress is started using the cypress-ntlm launcher.');
    }
}
function setupProxyEnvironment(config, ports) {
    config.env.NTLM_AUTH_PROXY = ports.ntlmProxyUrl;
    config.env.NTLM_AUTH_API = ports.configApiUrl;
    return config;
}
function initNtlmAuth(config) {
    return new Promise((resolve, reject) => {
        try {
            let ports = portsFileService.parse();
            validateEnvironment(ports);
            config = setupProxyEnvironment(config, ports);
            resolve(config);
        }
        catch (err) {
            reject(err);
        }
    });
}
exports.initNtlmAuth = initNtlmAuth;
