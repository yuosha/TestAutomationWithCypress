"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const getPort = require('get-port');
const inversify_1 = require("inversify");
const dependency_injection_types_1 = require("./dependency.injection.types");
let NtlmProxyServer = class NtlmProxyServer {
    constructor(ntlmProxyMitm, httpMitmProxyFacade, debug) {
        this.initDone = false;
        this._ntlmProxyMitm = ntlmProxyMitm;
        this._httpMitmProxy = httpMitmProxyFacade;
        this._debug = debug;
    }
    get ntlmProxyUrl() {
        if (this._ntlmProxyUrl) {
            return this._ntlmProxyUrl;
        }
        throw new Error('Cannot get ntlmProxyUrl, NtlmProxyServer not started!');
    }
    init() {
        if (this.initDone) {
            return;
        }
        this._httpMitmProxy.use(this._ntlmProxyMitm);
        this.initDone = true;
    }
    start(port) {
        return __awaiter(this, void 0, void 0, function* () {
            this.init();
            try {
                if (!port) {
                    port = yield getPort();
                    if (port === undefined) {
                        this._debug.log('Cannot find free port');
                        throw new Error('Cannot find free port');
                    }
                }
                this._ntlmProxyUrl = yield this._httpMitmProxy.listen(port);
                this._debug.log('NTLM auth proxy listening on port:', port);
                this._ntlmProxyUrl = 'http://127.0.0.1:' + port;
                this._ntlmProxyMitm.NtlmProxyPort = String(port);
                return this._ntlmProxyUrl;
            }
            catch (err) {
                this._debug.log('Cannot start NTLM auth proxy');
                throw err;
            }
        });
    }
    stop() {
        this._debug.log('Shutting down NTLM proxy');
        this._httpMitmProxy.close();
        this._ntlmProxyUrl = undefined;
        this._ntlmProxyMitm.NtlmProxyPort = '';
    }
};
NtlmProxyServer = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(dependency_injection_types_1.TYPES.INtlmProxyMitm)),
    __param(1, inversify_1.inject(dependency_injection_types_1.TYPES.IHttpMitmProxyFacade)),
    __param(2, inversify_1.inject(dependency_injection_types_1.TYPES.IDebugLogger)),
    __metadata("design:paramtypes", [Object, Object, Object])
], NtlmProxyServer);
exports.NtlmProxyServer = NtlmProxyServer;
