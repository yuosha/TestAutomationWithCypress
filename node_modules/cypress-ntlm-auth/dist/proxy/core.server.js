"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const axios_1 = __importDefault(require("axios"));
const dependency_injection_types_1 = require("./dependency.injection.types");
let CoreServer = class CoreServer {
    constructor(configServer, ntlmProxyServer, portsFileService, upstreamProxyManager, configStore, connectionContextManager, configController, debug) {
        this._configServer = configServer;
        this._ntlmProxyServer = ntlmProxyServer;
        this._portsFileService = portsFileService;
        this._upstreamProxyManager = upstreamProxyManager;
        this._configStore = configStore;
        this._connectionContextManager = connectionContextManager;
        this._configController = configController;
        this._debug = debug;
        this._configController.configApiEvent.addListener('reset', () => this.ntlmConfigReset('reset'));
        this._configController.configApiEvent.addListener('quit', (keepPortsFile) => __awaiter(this, void 0, void 0, function* () { return yield this.stop(keepPortsFile); }));
    }
    start(allowMultipleInstances, httpProxy, httpsProxy, noProxy) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.stopExistingInstance(allowMultipleInstances);
            this._upstreamProxyManager.init(httpProxy, httpsProxy, noProxy);
            let configApiUrl = yield this._configServer.start();
            let ntlmProxyUrl;
            try {
                ntlmProxyUrl = yield this._ntlmProxyServer.start();
            }
            catch (err) {
                yield this._configServer.stop();
                throw err;
            }
            let ports = {
                configApiUrl: configApiUrl,
                ntlmProxyUrl: ntlmProxyUrl
            };
            try {
                yield this._portsFileService.save(ports);
                this._debug.log('wrote %s', this._portsFileService.fullPath());
            }
            catch (err) {
                yield this._configServer.stop();
                this._ntlmProxyServer.stop();
                throw err;
            }
            return ports;
        });
    }
    stop(keepPortsFile) {
        return __awaiter(this, void 0, void 0, function* () {
            if (keepPortsFile === false) {
                yield this._portsFileService.delete();
                this._debug.log('ports file deleted');
            }
            this.ntlmConfigReset('stop');
            yield this._configServer.stop();
            this._ntlmProxyServer.stop();
            this._upstreamProxyManager.reset();
        });
    }
    stopExistingInstance(allowMultipleInstances) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._portsFileService.exists()) {
                if (allowMultipleInstances) {
                    this._debug.log('Existing proxy instance found, leave it running since multiple instances are allowed');
                    return;
                }
                this._debug.log('Existing proxy instance found, sending shutdown');
                let ports = this._portsFileService.parse();
                try {
                    yield axios_1.default.post(ports.configApiUrl + '/quit', { keepPortsFile: true }, { timeout: 15000 });
                }
                catch (err) {
                    this._debug.log('Quit request failed, trying to delete the ports file: ' + err);
                }
                yield this._portsFileService.delete();
                this._debug.log('Ports file deleted');
            }
        });
    }
    ntlmConfigReset(event) {
        this._configStore.clear();
        this._connectionContextManager.removeAllConnectionContexts(event);
        this._connectionContextManager.removeAndCloseAllTunnels(event);
    }
};
CoreServer = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(dependency_injection_types_1.TYPES.IConfigServer)),
    __param(1, inversify_1.inject(dependency_injection_types_1.TYPES.INtlmProxyServer)),
    __param(2, inversify_1.inject(dependency_injection_types_1.TYPES.IPortsFileService)),
    __param(3, inversify_1.inject(dependency_injection_types_1.TYPES.IUpstreamProxyManager)),
    __param(4, inversify_1.inject(dependency_injection_types_1.TYPES.IConfigStore)),
    __param(5, inversify_1.inject(dependency_injection_types_1.TYPES.IConnectionContextManager)),
    __param(6, inversify_1.inject(dependency_injection_types_1.TYPES.IConfigController)),
    __param(7, inversify_1.inject(dependency_injection_types_1.TYPES.IDebugLogger)),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object, Object, Object, Object])
], CoreServer);
exports.CoreServer = CoreServer;
