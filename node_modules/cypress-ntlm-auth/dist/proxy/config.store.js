"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_converter_1 = require("../util/url.converter");
const inversify_1 = require("inversify");
let ConfigStore = class ConfigStore {
    constructor() {
        this.ntlmHosts = {};
        this.ntlmSsoHosts = [];
        this.ntlmSsoHostWildcards = [];
    }
    updateConfig(config) {
        let ntlmHostUrl = url_converter_1.toCompleteUrl(config.ntlmHost, false);
        let hostConfig = {
            ntlmHost: ntlmHostUrl.href,
            username: config.username,
            password: config.password,
            domain: config.domain ? config.domain.toUpperCase() : undefined,
            workstation: config.workstation ? config.workstation.toUpperCase() : undefined,
            ntlmVersion: config.ntlmVersion
        };
        this.ntlmHosts[ntlmHostUrl.href] = hostConfig;
    }
    exists(ntlmHostUrl) {
        return ntlmHostUrl.href in this.ntlmHosts;
    }
    get(ntlmHostUrl) {
        return this.ntlmHosts[ntlmHostUrl.href];
    }
    setSsoConfig(ntlmSsoConfig) {
        const nonWildcards = ntlmSsoConfig.ntlmHosts.filter(s => s.indexOf('*') === -1);
        const wildcards = ntlmSsoConfig.ntlmHosts.filter(s => s.indexOf('*') !== -1);
        this.ntlmSsoHosts = nonWildcards;
        this.ntlmSsoHostWildcards = wildcards.map(s => new RegExp(`^${s.replace(/\*/g, '.*')}$`, 'i'));
    }
    useSso(ntlmHostUrl) {
        if (this.matchNtlmSsoHosts(ntlmHostUrl.hostname) && this.exists(ntlmHostUrl) === false) {
            return true;
        }
        return false;
    }
    existsOrUseSso(ntlmHostUrl) {
        return this.exists(ntlmHostUrl) || this.matchNtlmSsoHosts(ntlmHostUrl.hostname);
    }
    matchNtlmSsoHosts(hostname) {
        if (this.ntlmSsoHosts.includes(hostname)) {
            return true;
        }
        return this.ntlmSsoHostWildcards.findIndex(re => re.test(hostname)) !== -1;
    }
    clear() {
        this.ntlmHosts = {};
        this.ntlmSsoHosts = [];
        this.ntlmSsoHostWildcards = [];
    }
};
ConfigStore = __decorate([
    inversify_1.injectable()
], ConfigStore);
exports.ConfigStore = ConfigStore;
