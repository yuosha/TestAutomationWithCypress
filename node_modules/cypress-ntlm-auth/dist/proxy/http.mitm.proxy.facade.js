"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const httpMitmProxy = require("http-mitm-proxy");
let HttpMitmProxyFacade = class HttpMitmProxyFacade {
    constructor() {
        this._ntlmProxyListening = false;
        this._ntlmProxy = httpMitmProxy();
    }
    use(mod) {
        this._ntlmProxy.use(mod);
        return this;
    }
    listen(port) {
        return new Promise((resolve, reject) => this._ntlmProxy.listen({ host: 'localhost', port: port, keepAlive: true, forceSNI: false }, (err) => {
            if (err) {
                reject(err);
            }
            this._ntlmProxyListening = true;
            const url = 'http://127.0.0.1:' + port;
            resolve(url);
        }));
    }
    close() {
        if (this._ntlmProxyListening) {
            this._ntlmProxy.close();
            this._ntlmProxyListening = false;
        }
    }
};
HttpMitmProxyFacade = __decorate([
    inversify_1.injectable(),
    __metadata("design:paramtypes", [])
], HttpMitmProxyFacade);
exports.HttpMitmProxyFacade = HttpMitmProxyFacade;
