"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dependency_injection_1 = require("./proxy/dependency.injection");
const dependency_injection_types_1 = require("./proxy/dependency.injection.types");
const node_cleanup_1 = __importDefault(require("node-cleanup"));
const container = new dependency_injection_1.DependencyInjection();
let cypressNtlm = container.get(dependency_injection_types_1.TYPES.ICypressNtlm);
let proxyMain = container.get(dependency_injection_types_1.TYPES.IMain);
let debug = container.get(dependency_injection_types_1.TYPES.IDebugLogger);
const upstreamProxyConfigurator = container.get(dependency_injection_types_1.TYPES.IUpstreamProxyConfigurator);
function run(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            if (cypressNtlm.checkCypressIsInstalled() === false) {
                throw new Error("cypress-ntlm-auth requires Cypress to be installed.");
            }
            upstreamProxyConfigurator.processNoProxyLoopback();
            debug.log("Starting ntlm-proxy...");
            proxyMain
                .run(false, process.env.HTTP_PROXY, process.env.HTTPS_PROXY, process.env.NO_PROXY)
                .then(() => {
                cypressNtlm.checkProxyIsRunning(15000, 200).then(portsFile => {
                    process.env.HTTP_PROXY = portsFile.ntlmProxyUrl;
                    process.env.HTTPS_PROXY = portsFile.ntlmProxyUrl;
                    process.env.NO_PROXY = "<-loopback>";
                    upstreamProxyConfigurator.removeUnusedProxyEnv();
                    debug.log("ntlm-proxy started, running tests through Cypress...");
                    // Start up Cypress and let it parse any options
                    const cypress = require("cypress");
                    cypress
                        .run(options)
                        .then((result) => {
                        debug.log("Tests finished, stopping ntlm-proxy...");
                        proxyMain.stop().then(() => resolve(result));
                    })
                        .catch((err) => {
                        debug.log("Test exception, stopping ntlm-proxy...");
                        proxyMain.stop().then(() => reject(err));
                    });
                });
            });
        });
    });
}
exports.run = run;
// Unfortunately we can only catch these signals on Mac/Linux,
// Windows gets a hard exit => the portsFile is left behind,
// but will be replaced on next start
node_cleanup_1.default((exitCode, signal) => {
    if (exitCode) {
        debug.log("Detected process exit with code", exitCode);
        // On a non-signal exit, we cannot postpone the process termination.
        // We try to cleanup but cannot be sure that the ports file was deleted.
        proxyMain.stop();
    }
    if (signal) {
        debug.log("Detected termination signal", signal);
        // On signal exit, we postpone the process termination by returning false,
        // to ensure that cleanup has completed.
        (() => __awaiter(void 0, void 0, void 0, function* () {
            yield proxyMain.stop();
            process.kill(process.pid, signal);
        }))();
        node_cleanup_1.default.uninstall(); // don't call cleanup handler again
        return false;
    }
});
