"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dependency_injection_types_1 = require("../proxy/dependency.injection.types");
const inversify_1 = require("inversify");
const os_1 = __importDefault(require("os"));
let UpstreamProxyConfigurator = class UpstreamProxyConfigurator {
    constructor(debug) {
        this._loopbackDisable = "<-loopback>";
        this._noProxyLocalhost = "localhost";
        this._noProxyLoopback = "127.0.0.1";
        this._debug = debug;
    }
    removeUnusedProxyEnv() {
        // Clear potentially existing proxy settings to avoid conflicts in cypress proxy config
        if (os_1.default.platform() !== "win32") {
            delete process.env.http_proxy;
            delete process.env.https_proxy;
            delete process.env.no_proxy;
        }
        delete process.env.npm_config_proxy;
        delete process.env.npm_config_https_proxy;
        delete process.env.NPM_CONFIG_PROXY;
        delete process.env.NPM_CONFIG_HTTPS_PROXY;
    }
    processNoProxyLoopback() {
        var _a;
        if (process.env.HTTP_PROXY || process.env.HTTPS_PROXY) {
            const env_no_proxy = (_a = process.env.NO_PROXY) === null || _a === void 0 ? void 0 : _a.trim();
            if (env_no_proxy && env_no_proxy.indexOf(this._loopbackDisable) !== -1) {
                this._debug.log("NO_PROXY contains '<-loopback>', will not disable localhost proxying");
            }
            else {
                process.env.NO_PROXY = this.addLoopbackToNoProxy(env_no_proxy);
            }
        }
    }
    addLoopbackToNoProxy(no_proxy) {
        let no_proxy_parts = [];
        if (no_proxy) {
            no_proxy_parts = no_proxy.split(",").map(s => s.trim());
        }
        if (no_proxy_parts.indexOf(this._noProxyLocalhost) === -1) {
            this._debug.log("Adding " +
                this._noProxyLocalhost +
                " to NO_PROXY to disable localhost proxying");
            no_proxy_parts.push(this._noProxyLocalhost);
        }
        if (no_proxy_parts.indexOf(this._noProxyLoopback) === -1) {
            this._debug.log("Adding " +
                this._noProxyLoopback +
                " to NO_PROXY to disable localhost proxying");
            no_proxy_parts.push(this._noProxyLoopback);
        }
        return no_proxy_parts.join(",");
    }
};
UpstreamProxyConfigurator = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(dependency_injection_types_1.TYPES.IDebugLogger)),
    __metadata("design:paramtypes", [Object])
], UpstreamProxyConfigurator);
exports.UpstreamProxyConfigurator = UpstreamProxyConfigurator;
