"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const url = __importStar(require("url"));
const appdata_path_1 = __importDefault(require("appdata-path"));
const inversify_1 = require("inversify");
let PortsFileService = class PortsFileService {
    constructor() {
        this._portsFileFolder = appdata_path_1.default('cypress-ntlm-auth');
        this._portsFileWithPath = path_1.default.join(appdata_path_1.default('cypress-ntlm-auth'), 'cypress-ntlm-auth.port');
    }
    fullPath() {
        return this._portsFileWithPath;
    }
    delete() {
        return __awaiter(this, void 0, void 0, function* () {
            yield fs_extra_1.default.unlink(this._portsFileWithPath);
        });
    }
    save(ports) {
        return __awaiter(this, void 0, void 0, function* () {
            yield fs_extra_1.default.mkdirp(this._portsFileFolder);
            yield fs_extra_1.default.writeJson(this._portsFileWithPath, ports);
        });
    }
    exists() {
        return fs_extra_1.default.existsSync(this._portsFileWithPath);
    }
    parse() {
        if (this.exists()) {
            let data = fs_extra_1.default.readJsonSync(this._portsFileWithPath);
            return this.validatePortsFile(data);
        }
        else {
            throw new Error('cypress-ntlm-auth proxy does not seem to be running. ' +
                'It must be started before cypress. Please see the docs.' + this._portsFileWithPath);
        }
    }
    // Was the ports file modified within the last 10 seconds?
    recentlyModified() {
        if (this.exists()) {
            let stats = fs_extra_1.default.statSync(this._portsFileWithPath);
            let mtime = new Date(util_1.default.inspect(stats.mtime));
            let now = new Date();
            if ((now.getTime() - mtime.getTime()) < 10 * 1000) {
                return true;
            }
        }
        return false;
    }
    validatePortsFile(data) {
        let ports = data;
        if (!ports || !ports.configApiUrl || !ports.ntlmProxyUrl) {
            throw new Error('Cannot parse ports file ' + this._portsFileWithPath);
        }
        ports = data;
        let urlTest = url.parse(ports.configApiUrl);
        if (!urlTest.protocol || !urlTest.hostname ||
            !urlTest.port || !urlTest.slashes) {
            throw new Error('Invalid configApiUrl in ports file ' + this._portsFileWithPath);
        }
        urlTest = url.parse(ports.ntlmProxyUrl);
        if (!urlTest.protocol || !urlTest.hostname ||
            !urlTest.port || !urlTest.slashes) {
            throw new Error('Invalid ntlmProxyUrl in ports file ' + this._portsFileWithPath);
        }
        return ports;
    }
};
PortsFileService = __decorate([
    inversify_1.injectable()
], PortsFileService);
exports.PortsFileService = PortsFileService;
